{"version":3,"sources":["webpack:///./routes/fair_price/style.css","webpack:///./assets/images/tresor.png","webpack:///./components/zoomableImage/index.js","webpack:///./routes/fair_price/index.js","webpack:///./services/number/index.js"],"names":["ZoomableImage","src","zoomLevel","setZoomLevel","useState","useEffect","zoomInterval","setInterval","prevZoomLevel","clearInterval","h","style","transform","display","margin","zIndex","FairPrice","randomNumber","setRandomNumber","userInput","setUserInput","previousGuesses","setPreviousGuesses","error","setError","lives","setLives","win","setWin","handleGuessClick","parsedInput","parseInt","some","guess","isNaN","guessRelation","prevGuesses","relation","input","prevLives","console","log","handleLives","generateRandomNumber","randomNum","getRandomInt","className","for","type","id","name","placeholder","value","onChange","e","target","disabled","onKeyPress","key","onClick","Losing","Fragment","Winning","tresor","length","map","index","FaThumbsUp","color","marginRight","FaThumbsDown","FaHeart","fontSize","Solution","solution","resetGame","n","Math","floor","random","hasUniqueDigits","digitSet","Set","digit","has","add","generateSecretNumber","numbers","start","step","Array","from","_","range","secret","push","splice"],"mappings":"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","file":"route-fair_price.chunk.cb41c.esm.js","sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"error\":\"error__Hrc1j\",\"errormessage\":\"errormessage__jMB98\"};","export default __webpack_public_path__ + \"ffe09f43eada841ade270aaeb7f58ef7.png\";","import { h } from \"preact\";\r\nimport { useState, useEffect } from \"preact/hooks\";\r\n\r\nconst ZoomableImage = ({ src }) => {\r\n  const [zoomLevel, setZoomLevel] = useState(1);\r\n\r\n  useEffect(() => {\r\n    const zoomInterval = setInterval(() => {\r\n      // Réglage du niveau de zoom entre 0.5 et 2 (par exemple)\r\n      setZoomLevel((prevZoomLevel) =>\r\n        prevZoomLevel === 2 ? 0.5 : prevZoomLevel + 0.5\r\n      );\r\n    }, 1000); // Changer la vitesse de zoom/dézoom en ajustant l'intervalle\r\n    return () => clearInterval(zoomInterval);\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <img\r\n        src={src}\r\n        style={{\r\n          transform: `scale(${zoomLevel})`,\r\n          display: \"block\", // Pour éviter l'espace sous l'image\r\n          margin: \"0 auto\", // Centrer horizontalement\r\n          zIndex: -10\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ZoomableImage;\r\n","import { Fragment, h } from \"preact\";\r\nimport { useState, useEffect } from \"preact/hooks\";\r\nimport style from \"./style.css\";\r\nimport { FaThumbsUp, FaThumbsDown, FaHeart } from \"react-icons/fa\";\r\nimport tresor from \"../../assets/images/tresor.png\";\r\nimport ZoomableImage from \"../../components/zoomableImage\";\r\nimport { getRandomInt } from \"../../services/number\";\r\nimport Losing from \"../../components/losing\";\r\nimport Winning from \"../../components/winning\";\r\nimport Solution from \"../../components/solution\";\r\n\r\nconst FairPrice = () => {\r\n  const [randomNumber, setRandomNumber] = useState(null);\r\n  const [userInput, setUserInput] = useState(\"\");\r\n  const [previousGuesses, setPreviousGuesses] = useState([]);\r\n  const [error, setError] = useState(\"\");\r\n  const [lives, setLives] = useState(10);\r\n  const [win, setWin] = useState(false);\r\n\r\n  const resetGame = () => {\r\n    setUserInput(\"\");\r\n    setPreviousGuesses([]);\r\n    setError(\"\");\r\n    setLives(5);\r\n    setWin(false);\r\n    generateRandomNumber();\r\n  };\r\n\r\n  const handleInputChange = (e) => {\r\n    setUserInput(e.target.value);\r\n  };\r\n\r\n  const handleLives = (input) => {\r\n    if (input !== randomNumber) {\r\n      setLives((prevLives) => prevLives - 1); // Décrémenter le nombre de vies\r\n    } else {\r\n      console.log(\"win\");\r\n      setWin(true);\r\n    }\r\n  };\r\n\r\n  const moreOrLess = (input) => {\r\n    return input < randomNumber\r\n    ? \"More\"\r\n    : \"Less\";\r\n  }\r\n\r\n  const handleGuessClick = () => {\r\n    try {\r\n      const parsedInput = parseInt(userInput, 10);\r\n      if (previousGuesses.some((guess) => guess.guess === parsedInput)) {\r\n        setError(\r\n          `${parsedInput} has already been guessed. Try a different number.\\n`\r\n        );\r\n        return;\r\n      }\r\n      if (\r\n        !isNaN(parsedInput) &&\r\n        parsedInput >= 1 &&\r\n        parsedInput <= 1000 &&\r\n        lives > 0\r\n      ) {\r\n        const guessRelation =\r\n          parsedInput === randomNumber\r\n            ? \"You found it !!\"\r\n            : moreOrLess(parsedInput);\r\n        setPreviousGuesses((prevGuesses) => [\r\n          ...prevGuesses,\r\n          { guess: parsedInput, relation: guessRelation },\r\n        ]);\r\n        setError(\"\");\r\n        handleLives(parsedInput);\r\n      } else if (lives === 0) {\r\n        setError(\"Vous n'avez plus de vies restantes, Perdu !\");\r\n      } else {\r\n        setError(\"Veuillez saisir un nombre entre 1 et 1000.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error parsing input:\", error);\r\n      setError(\"Error parsing input. Please enter a valid number.\");\r\n    }\r\n  };\r\n\r\n  const generateRandomNumber = () => {\r\n    try {\r\n      const randomNum = getRandomInt(1000);\r\n      setRandomNumber(randomNum);\r\n    } catch (error) {\r\n      console.error(\"Error generating random number:\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    try {\r\n      generateRandomNumber();\r\n      return () => {};\r\n    } catch (error) {\r\n      console.error(\"Error in useEffect:\", error);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"center-page\">\r\n      <label className=\"centerLabel\" for=\"price\">\r\n        Welcome to the Fair price, in this game you should guess the hidden\r\n        price. You have a limited number of lives ({lives}). With each failed\r\n        attempt, you will have a hint <b>less</b> or <b>more</b>. Here we go you\r\n        can start to guess :\r\n      </label>\r\n      <div className=\"inputContainer\">\r\n        <input\r\n          type=\"number\"\r\n          id=\"price\"\r\n          name=\"price\"\r\n          placeholder=\"your proposition\"\r\n          value={userInput}\r\n          onChange={handleInputChange}\r\n          className={error ? style.error : \"\"}\r\n          disabled={win}\r\n          onKeyPress={(e) => {\r\n            if (e.key === \"Enter\") {\r\n              handleGuessClick();\r\n            }\r\n          }}\r\n        />\r\n        <button onClick={handleGuessClick} disabled={win}>\r\n          {!win ? \"Guess\" : \"Found\"}\r\n        </button>\r\n      </div>\r\n      {error && <div className={style.errormessage}>{error}</div>}\r\n      {lives == 0 && <Losing />}\r\n      {win && (\r\n        <Fragment>\r\n          <Winning />\r\n          <ZoomableImage src={tresor} />\r\n        </Fragment>\r\n      )}\r\n      {previousGuesses.length > 0 && (\r\n        <div>\r\n          <p>Previous guesses:</p>\r\n          <ul>\r\n            {previousGuesses.map((guess, index) => (\r\n              <li key={index}>\r\n                {guess.guess} -{\" \"}\r\n                {guess.relation === \"You found it !!\" ? (\r\n                  <FaThumbsUp color=\"green\" style={{ marginRight: \"5px\" }} />\r\n                ) : (\r\n                  <FaThumbsDown color=\"red\" style={{ marginRight: \"5px\" }} />\r\n                )}\r\n                {guess.relation}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n      <div>\r\n        Lives number: {lives}\r\n        {lives != 0 ? (\r\n          <FaHeart style={{ fontSize: \"2em\", margin: \"0 5px\" }} />\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div>\r\n      {win || lives === 0 ? (\r\n        <div>\r\n          {randomNumber !== null && (\r\n            <Solution type=\"number\" solution={randomNumber} />\r\n          )}\r\n          <button onClick={resetGame}>Reset Game</button>\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FairPrice;\r\n","/**\r\n * Method for generating a random number between 1 and n\r\n * @param {*} n max value for the generated number\r\n * @returns a number between 0 and n\r\n */\r\nexport const getRandomInt = (n) => {\r\n  return Math.floor(Math.random() * n) + 1;\r\n};\r\n\r\n/**\r\n * Method for creating a list ranging from a minimum value to a maximum value with a predefined increment\r\n * @param {*} start start value \r\n * @param {*} end end value\r\n * @param {*} step increment between two values\r\n * @returns\r\n */\r\nexport const range = (start, end, step) => {\r\n  step = step || 1;\r\n  return Array.from(\r\n    { length: Math.floor((end - start) / step) + 1 },\r\n    (_, index) => start + index * step\r\n  );\r\n};\r\n\r\n /**\r\n   * Method checking the unicity of the digits in one number.\r\n   * @param {*} input\r\n   * @returns true if unique digit in number\r\n   */\r\n export const hasUniqueDigits = (input) => {\r\n  const digitSet = new Set();\r\n  for (const digit of input) {\r\n    if (digitSet.has(digit)) {\r\n      return false;\r\n    }\r\n    digitSet.add(digit);\r\n  }\r\n  return true;\r\n};\r\n\r\n  /**\r\n   * Method for generating a number with four unique digits\r\n   * @returns\r\n   */\r\n  export const generateSecretNumber = () => {\r\n    let numbers = range(1, 9, 1);\r\n    console.log(numbers);\r\n    const secret = [];\r\n    while (secret.length < 4) {\r\n      let random = getRandomInt(numbers.length);\r\n      secret.push(numbers[random - 1]);\r\n      numbers.splice(random - 1, 1);\r\n    }\r\n    return secret;\r\n  };\r\n"],"sourceRoot":""}